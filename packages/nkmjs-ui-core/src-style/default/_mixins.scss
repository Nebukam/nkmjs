@import './_variables';
@import './_constants';
@import './_functions';

/* Size mixins */

$prefix: 'before';
$suffix: 'after';

/*
    Repeats the same value for multiple properties
*/

@mixin repeat-value($value, $properties...) {
    @for $i from 0 to length($properties) {
        #{nth($properties, $i + 1)}: $value;
    }
}


/*
    Spreads a list of value over multiple properties
    value length & properties length must be the same
*/

@mixin spread-values($values, $properties...) {
    @for $i from 0 to length($properties) {
        #{nth($properties, $i + 1)}: nth($values, $i + 1);
    }
}

/////////
@mixin for-each-selector($before, $selectorList, $after: '', $valueList: null, $properties...) {
    @for $i from 0 to length($selectorList) {
        $index: $i + 1;
        $selector: nth($selectorList, $index);
        @if ($valueList==null) {
            #{$before+$selector+$after} {
                @content($index);
            }
        }
        @else {
            $val: nth($valueList, $index);
            #{$before+$selector+$after} {
                @include repeat-value($val, $properties...);
                @content($index, $val);
            }
        }
    }
}

/////////
@mixin for-each-host-selector($before, $selectorList, $after: '', $element: '', $valueList: null, $properties...) {
    @for $i from 0 to length($selectorList) {
        $index: $i + 1;
        $selector: nth($selectorList, $index);
        @if ($valueList==null) {
            #{':host('+$before+$selector+$after+')'+$element} {
                @content($index);
            }
        }
        @else {
            $val: nth($valueList, $index);
            #{':host('+$before+$selector+$after+')'+$element} {
                @include repeat-value($val, $properties...);
                @content($index, $val);
            }
        }
    }
}


/* Interactive states mixins */

@mixin for-each-in($list) {
    @for $i from 0 to length($list) {
        $index: $i + 1;
        @content( $index, nth($list, $index));
    }
}

@mixin state-color-variations( $main_color, $secondary_color, $prim_alpha: 0.5, $sec_alpha: 0.8) {
    // Create per-state variants
    $bases: // base colors
    $main_color, // idle
    lighten($main_color, 10%), // focused
    lighten($main_color, 5%), // selected
    lighten($main_color, 20%); // focused+selected
    //
    $primaries: nth($bases, 1), rgba(nth($bases, 2), $prim_alpha), rgba(nth($bases, 3), $prim_alpha * 0.8), rgba(nth($bases, 4), $prim_alpha * 1.5);
    $secondaries: $secondary_color, rgba(lighten($secondary_color, 10%), $sec_alpha), rgba(lighten($secondary_color, 5%), $sec_alpha * 0.8), rgba(lighten($secondary_color, 20%), $sec_alpha * 1.5);
    $contrasties: label-color(nth($bases, 1)), label-color(nth($bases, 2)), label-color(nth($bases, 3)), label-color(nth($bases, 4));
    @include for-each-in($default_states_ids) using ($index, $state_name) {
        @content( $index, $state_name, nth($primaries, $index), nth($secondaries, $index), nth($contrasties, $index));
    }
}

@mixin state-host( $main_color, $secondary_color, $variant: '', $prim_alpha: 0.5, $sec_alpha: 0.8) {
    $c: nth($main_color, 1);
    @if (lightness( $c) < 40) {
        $c: lighten($c, 40%);
    }
     :host(#{$FOCUSED+$variant})::after,
     :host(#{$TOGGLED+$variant})::after {
        background-color: rgba($c, 1);
    }
    $m_states : $IDLE+$variant,
    $FOCUSED+$variant,
    $SELECTED+$variant,
    $SELECTED+$FOCUSED+$variant;
    $c:$main_color;
    $m_colors: // base colors
    $c, // idle
    lighten($c, 10%), // focused
    lighten($c, 5%), // selected
    lighten($c, 20%); // focused+selected
    $c:$m_colors;
    $m_el_colors: // element color 
    nth($c, 1),
    rgba(nth($c, 2), $prim_alpha),
    rgba(nth($c, 3), $prim_alpha * 0.8),
    rgba(nth($c, 4), $prim_alpha * 1.5);
    $c:$secondary_color;
    $m_la_colors: // element color 
    $c,
    rgba(lighten($c, 10%), $sec_alpha),
    rgba(lighten($c, 5%), $sec_alpha * 0.8),
    rgba(lighten($c, 20%), $sec_alpha * 1.5);
    @for $i from 0 to length($m_states) {
        $m_state: nth($m_states, $i + 1);
        $m_main_color: nth($m_el_colors, $i + 1);
        $m_secondary_color: nth($m_la_colors, $i + 1);
        $m_label_color: label-color(nth($m_colors, $i + 1));
        #{':host('+$m_state+')'} {
            @content($m_main_color, $m_secondary_color, $m_label_color);
        }
    }
}