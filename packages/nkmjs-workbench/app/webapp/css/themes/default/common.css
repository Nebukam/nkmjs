/*

    COMMON.SCSS
    Generic/shared style declarations.

    It is imported on a per-component basis
    For generic, host-related selectors, use main.scss

*/
/* OS Theme mixins */
/* Responsive mixins */
/* Mobile mixins */
/*
@mixin if-not-touch (){
    @media not (pointer:none), not (pointer:coarse) {
        @content;
    }
}

@mixin if-touch (){
    @media (pointer:none), (pointer:coarse) {
        @content;
    }
}
*/
/* Cosmetics */
/* Presets */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Scrollbar mixins */
/* Size mixins */
/*
    Repeats the same value for multiple properties
*/
/*
    Spreads a list of value over multiple properties
    value length & properties length must be the same
*/
/* Interactive states mixins */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
@font-face {
  font-family: "Regular";
  src: url("./fonts/roboto/Roboto-Regular.ttf") format("truetype");
}
@font-face {
  font-family: "Title";
  src: url("./fonts/d-din/D-DINCondensed.otf") format("opentype");
}
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
.label, .subtitle, .message {
  font-family: "Regular", apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  --font-size: var(--font_size_s);
  font-size: var(--font-size);
}
.label.font-tag, .subtitle.font-tag, .message.font-tag {
  --font-size: var(--font_size_tag);
  text-transform: uppercase;
}
.label.font-small, .subtitle.font-small, .message.font-small {
  --font-size: var(--font_size_xs);
}
.label.font-medium, .subtitle.font-medium, .message.font-medium {
  --font-size: var(--font_size_m);
}
.label.font-large, .subtitle.font-large, .message.font-large {
  --font-size: var(--font_size_l);
}
.label.font-xlarge, .subtitle.font-xlarge, .message.font-xlarge {
  --font-size: var(--font_size_xl);
}

.title {
  font-family: "Title", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  --font-size: var(--font_size_s_title);
  font-size: var(--font-size);
  text-transform: uppercase;
  line-height: 85%;
  text-shadow: 0 1px 0 #535353, 0 2px 0 #535353, 0 2px 2px rgba(0, 0, 0, 0.5);
}
.title.font-tag {
  --font-size: var(--font_size_tag_title);
}
.title.font-small {
  --font-size: var(--font_size_xs_title);
}
.title.font-medium {
  --font-size: var(--font_size_m_title);
}
.title.font-large {
  --font-size: var(--font_size_l_title);
  text-shadow: 0 1px 0 #535353, 0 2px 0 #535353, 0 5px 2px rgba(0, 0, 0, 0.5);
}
.title.font-xlarge {
  --font-size: var(--font_size_xl_title);
  text-shadow: 0 1px 0 #535353, 0 2px 0 #535353, 0 5px 2px rgba(0, 0, 0, 0.5);
}

.row-break {
  flex-basis: 100%;
  height: 0;
  width: 0%;
}

.column-break {
  flex-basis: 100%;
  height: 0%;
  width: 0;
}

:host(.size-xs) {
  --size:var(--size_xs);
}

:host(.size-s) {
  --size:var(--size_s);
}

:host(.size-m) {
  --size:var(--size_m);
}

:host(.size-l) {
  --size:var(--size_l);
}

:host(.size-xl) {
  --size:var(--size_xl);
}

:host(.infos) {
  --flavor_color: var(--col_infos);
  --flavor_contrast:var(--col_infos_contrast);
}

:host(.warning) {
  --flavor_color: var(--col_warning);
  --flavor_contrast:var(--col_warning_contrast);
}

:host(.error) {
  --flavor_color: var(--col_error);
  --flavor_contrast:var(--col_error_contrast);
}

:host(.ready) {
  --flavor_color: var(--col_ready);
  --flavor_contrast:var(--col_ready_contrast);
}

:host(.dirty) {
  --flavor_color: var(--col_dirty);
  --flavor_contrast:var(--col_dirty_contrast);
}

:host(.loading) {
  --flavor_color: var(--col_loading);
  --flavor_contrast:var(--col_loading_contrast);
}

:host(.processing) {
  --flavor_color: var(--col_processing);
  --flavor_contrast:var(--col_processing_contrast);
}

:host(.waiting) {
  --flavor_color: var(--col_waiting);
  --flavor_contrast:var(--col_waiting_contrast);
}

:host(.active) {
  --flavor_color: var(--col_active);
  --flavor_contrast:var(--col_active_contrast);
}

:host(.cta) {
  --flavor_color: var(--col_cta);
  --flavor_contrast:var(--col_cta_contrast);
}

@media (hover: none) and (pointer: coarse) {
  * {
    filter: none;
    -webkit-box-shadow: none;
    -moz-box-shadow: none;
    box-shadow: none;
  }
}
/*

    COMMON.SCSS
    Generic/shared style declarations.

    It is imported on a per-component basis
    For generic, host-only selectors, use main.scss

*/
/* OS Theme mixins */
/* Responsive mixins */
/* Mobile mixins */
/*
@mixin if-not-touch (){
    @media not (pointer:none), not (pointer:coarse) {
        @content;
    }
}

@mixin if-touch (){
    @media (pointer:none), (pointer:coarse) {
        @content;
    }
}
*/
/* Cosmetics */
/* Presets */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Scrollbar mixins */
/* Size mixins */
/*
    Repeats the same value for multiple properties
*/
/*
    Spreads a list of value over multiple properties
    value length & properties length must be the same
*/
/* Interactive states mixins */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
:host {
  order: var(--order);
}

:host(.infos) {
  --flavor_color: var(--col_infos);
  --flavor_contrast:var(--col_infos_contrast);
  --flavor_primary_idle: var(--fcol_1_0_i);
  --flavor_secondary_idle: var(--fcol_1_1_i);
  --flavor_contrast_idle: var(--fcol_1_2_i);
  --flavor_primary_focused: var(--fcol_1_0_f);
  --flavor_secondary_focused: var(--fcol_1_1_f);
  --flavor_contrast_focused: var(--fcol_1_2_f);
  --flavor_primary_selected: var(--fcol_1_0_s);
  --flavor_secondary_selected: var(--fcol_1_1_s);
  --flavor_contrast_selected: var(--fcol_1_2_s);
  --flavor_primary_selected_focused: var(--fcol_1_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_1_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_1_2_sf);
}

:host(.warning) {
  --flavor_color: var(--col_warning);
  --flavor_contrast:var(--col_warning_contrast);
  --flavor_primary_idle: var(--fcol_2_0_i);
  --flavor_secondary_idle: var(--fcol_2_1_i);
  --flavor_contrast_idle: var(--fcol_2_2_i);
  --flavor_primary_focused: var(--fcol_2_0_f);
  --flavor_secondary_focused: var(--fcol_2_1_f);
  --flavor_contrast_focused: var(--fcol_2_2_f);
  --flavor_primary_selected: var(--fcol_2_0_s);
  --flavor_secondary_selected: var(--fcol_2_1_s);
  --flavor_contrast_selected: var(--fcol_2_2_s);
  --flavor_primary_selected_focused: var(--fcol_2_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_2_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_2_2_sf);
}

:host(.error) {
  --flavor_color: var(--col_error);
  --flavor_contrast:var(--col_error_contrast);
  --flavor_primary_idle: var(--fcol_3_0_i);
  --flavor_secondary_idle: var(--fcol_3_1_i);
  --flavor_contrast_idle: var(--fcol_3_2_i);
  --flavor_primary_focused: var(--fcol_3_0_f);
  --flavor_secondary_focused: var(--fcol_3_1_f);
  --flavor_contrast_focused: var(--fcol_3_2_f);
  --flavor_primary_selected: var(--fcol_3_0_s);
  --flavor_secondary_selected: var(--fcol_3_1_s);
  --flavor_contrast_selected: var(--fcol_3_2_s);
  --flavor_primary_selected_focused: var(--fcol_3_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_3_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_3_2_sf);
}

:host(.ready) {
  --flavor_color: var(--col_ready);
  --flavor_contrast:var(--col_ready_contrast);
  --flavor_primary_idle: var(--fcol_4_0_i);
  --flavor_secondary_idle: var(--fcol_4_1_i);
  --flavor_contrast_idle: var(--fcol_4_2_i);
  --flavor_primary_focused: var(--fcol_4_0_f);
  --flavor_secondary_focused: var(--fcol_4_1_f);
  --flavor_contrast_focused: var(--fcol_4_2_f);
  --flavor_primary_selected: var(--fcol_4_0_s);
  --flavor_secondary_selected: var(--fcol_4_1_s);
  --flavor_contrast_selected: var(--fcol_4_2_s);
  --flavor_primary_selected_focused: var(--fcol_4_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_4_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_4_2_sf);
}

:host(.dirty) {
  --flavor_color: var(--col_dirty);
  --flavor_contrast:var(--col_dirty_contrast);
  --flavor_primary_idle: var(--fcol_5_0_i);
  --flavor_secondary_idle: var(--fcol_5_1_i);
  --flavor_contrast_idle: var(--fcol_5_2_i);
  --flavor_primary_focused: var(--fcol_5_0_f);
  --flavor_secondary_focused: var(--fcol_5_1_f);
  --flavor_contrast_focused: var(--fcol_5_2_f);
  --flavor_primary_selected: var(--fcol_5_0_s);
  --flavor_secondary_selected: var(--fcol_5_1_s);
  --flavor_contrast_selected: var(--fcol_5_2_s);
  --flavor_primary_selected_focused: var(--fcol_5_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_5_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_5_2_sf);
}

:host(.loading) {
  --flavor_color: var(--col_loading);
  --flavor_contrast:var(--col_loading_contrast);
  --flavor_primary_idle: var(--fcol_6_0_i);
  --flavor_secondary_idle: var(--fcol_6_1_i);
  --flavor_contrast_idle: var(--fcol_6_2_i);
  --flavor_primary_focused: var(--fcol_6_0_f);
  --flavor_secondary_focused: var(--fcol_6_1_f);
  --flavor_contrast_focused: var(--fcol_6_2_f);
  --flavor_primary_selected: var(--fcol_6_0_s);
  --flavor_secondary_selected: var(--fcol_6_1_s);
  --flavor_contrast_selected: var(--fcol_6_2_s);
  --flavor_primary_selected_focused: var(--fcol_6_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_6_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_6_2_sf);
}

:host(.processing) {
  --flavor_color: var(--col_processing);
  --flavor_contrast:var(--col_processing_contrast);
  --flavor_primary_idle: var(--fcol_7_0_i);
  --flavor_secondary_idle: var(--fcol_7_1_i);
  --flavor_contrast_idle: var(--fcol_7_2_i);
  --flavor_primary_focused: var(--fcol_7_0_f);
  --flavor_secondary_focused: var(--fcol_7_1_f);
  --flavor_contrast_focused: var(--fcol_7_2_f);
  --flavor_primary_selected: var(--fcol_7_0_s);
  --flavor_secondary_selected: var(--fcol_7_1_s);
  --flavor_contrast_selected: var(--fcol_7_2_s);
  --flavor_primary_selected_focused: var(--fcol_7_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_7_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_7_2_sf);
}

:host(.waiting) {
  --flavor_color: var(--col_waiting);
  --flavor_contrast:var(--col_waiting_contrast);
  --flavor_primary_idle: var(--fcol_8_0_i);
  --flavor_secondary_idle: var(--fcol_8_1_i);
  --flavor_contrast_idle: var(--fcol_8_2_i);
  --flavor_primary_focused: var(--fcol_8_0_f);
  --flavor_secondary_focused: var(--fcol_8_1_f);
  --flavor_contrast_focused: var(--fcol_8_2_f);
  --flavor_primary_selected: var(--fcol_8_0_s);
  --flavor_secondary_selected: var(--fcol_8_1_s);
  --flavor_contrast_selected: var(--fcol_8_2_s);
  --flavor_primary_selected_focused: var(--fcol_8_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_8_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_8_2_sf);
}

:host(.active) {
  --flavor_color: var(--col_active);
  --flavor_contrast:var(--col_active_contrast);
  --flavor_primary_idle: var(--fcol_9_0_i);
  --flavor_secondary_idle: var(--fcol_9_1_i);
  --flavor_contrast_idle: var(--fcol_9_2_i);
  --flavor_primary_focused: var(--fcol_9_0_f);
  --flavor_secondary_focused: var(--fcol_9_1_f);
  --flavor_contrast_focused: var(--fcol_9_2_f);
  --flavor_primary_selected: var(--fcol_9_0_s);
  --flavor_secondary_selected: var(--fcol_9_1_s);
  --flavor_contrast_selected: var(--fcol_9_2_s);
  --flavor_primary_selected_focused: var(--fcol_9_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_9_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_9_2_sf);
}

:host(.cta) {
  --flavor_color: var(--col_cta);
  --flavor_contrast:var(--col_cta_contrast);
  --flavor_primary_idle: var(--fcol_10_0_i);
  --flavor_secondary_idle: var(--fcol_10_1_i);
  --flavor_contrast_idle: var(--fcol_10_2_i);
  --flavor_primary_focused: var(--fcol_10_0_f);
  --flavor_secondary_focused: var(--fcol_10_1_f);
  --flavor_contrast_focused: var(--fcol_10_2_f);
  --flavor_primary_selected: var(--fcol_10_0_s);
  --flavor_secondary_selected: var(--fcol_10_1_s);
  --flavor_contrast_selected: var(--fcol_10_2_s);
  --flavor_primary_selected_focused: var(--fcol_10_0_sf);
  --flavor_secondary_selected_focused: var(--fcol_10_1_sf);
  --flavor_contrast_selected_focused: var(--fcol_10_2_sf);
}

/* Icon */
.icon {
  margin: 4px;
  padding: 0;
  --h-size:calc( var(--size) / 2);
  --clamped-size: clamp(var(--size_xs), var(--h-size), var(--size_l));
  width: var(--clamped-size);
  min-width: var(--clamped-size);
  max-width: var(--clamped-size);
  height: var(--clamped-size);
  min-height: var(--clamped-size);
  max-height: var(--clamped-size);
  border: 3px solid #e5e5e5;
  background-size: contain;
  background-repeat: no-repeat;
  background-position: center center;
  opacity: 0.8;
  border-radius: 1000px;
  box-sizing: border-box;
}
.icon:only-child {
  margin: 0;
}

/* Extensions */
.ext-overlay {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  pointer-events: none;
  border-radius: 3px;
  box-sizing: border-box;
}

.drag-overlay {
  border: 1px solid #3ec188;
}

.drop-target-overlay {
  border: 1px solid #78a400;
}

/*

    COMMON.SCSS
    Generic/shared style declarations.

    It is imported on a per-component basis
    For generic, host-related selectors, use main.scss

*/
/* OS Theme mixins */
/* Responsive mixins */
/* Mobile mixins */
/*
@mixin if-not-touch (){
    @media not (pointer:none), not (pointer:coarse) {
        @content;
    }
}

@mixin if-touch (){
    @media (pointer:none), (pointer:coarse) {
        @content;
    }
}
*/
/* Cosmetics */
/* Presets */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Scrollbar mixins */
/* Size mixins */
/*
    Repeats the same value for multiple properties
*/
/*
    Spreads a list of value over multiple properties
    value length & properties length must be the same
*/
/* Interactive states mixins */
/* Color */
/* Min Max Clamp */
/* STR Replace */
/* Colors */
/* Sizes */
/* Font sizes */
/* Boilerplate */
/* High-level UI Flags */
/* Generics */
/* Interactive states */
/* Interactive additive */
/* Positions */
/* Misc */
/* Sizes */
/* Variants */
/* Color */
/* Min Max Clamp */
/* STR Replace */